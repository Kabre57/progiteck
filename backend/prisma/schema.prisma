// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id      Int    @id @default(autoincrement())
  libelle String @unique

  utilisateurs Utilisateur[]

  @@map("roles")
}

model Utilisateur {
  id          Int       @id @default(autoincrement())
  nom         String
  prenom      String
  email       String    @unique
  motDePasse  String
  phone       String?
  theme       String?   @default("light")
  displayName String?
  address     String?
  state       String?
  country     String?
  designation String?
  balance     Float?    @default(0)
  emailStatus String?   @default("verified")
  kycStatus   String?   @default("pending")
  lastLogin   DateTime?
  status      String    @default("active")
  roleId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  role                    Role                     @relation(fields: [roleId], references: [id])
  technicien              Technicien?
  auditLogs               AuditLog[]
  messages                Message[]                @relation("MessageSender")
  messagesReceived        Message[]                @relation("MessageReceiver")
  notifications           Notification[]
  messageGroupes          MessageGroupe[] // Ajout ici
  devisValides            Devis[]                  @relation("DevisValidateur")
  devisValidesPDG         Devis[]                  @relation("DevisValidateurPDG")
  historiqueModifications HistoriqueModification[] // Ajout de la relation inverse
  piecesJointes           PieceJointe[] // Ajout de la relation inverse

  @@map("utilisateurs")
}

model Specialite {
  id          Int     @id @default(autoincrement())
  libelle     String  @unique
  description String?

  techniciens Technicien[]

  @@map("specialites")
}

model Technicien {
  id            Int    @id @default(autoincrement())
  nom           String
  prenom        String
  contact       String
  specialiteId  Int
  utilisateurId Int?   @unique

  specialite       Specialite               @relation(fields: [specialiteId], references: [id])
  utilisateur      Utilisateur?             @relation(fields: [utilisateurId], references: [id])
  interventions    TechnicienIntervention[]
  rapports         RapportMission[]
  sortiesMateriels SortieMateriel[]

  @@map("techniciens")
}

model TypePaiement {
  id            Int     @id @default(autoincrement())
  libelle       String  @unique
  description   String?
  delaiPaiement Int?    @default(30)
  tauxRemise    Float?  @default(0)
  actif         Boolean @default(true)

  clients Client[]

  @@map("types_paiement")
}

model Client {
  id               Int      @id @default(autoincrement())
  nom              String
  email            String   @unique
  telephone        String?
  entreprise       String?
  typeDeCart       String?  @default("Standard")
  numeroDeCarte    String?
  typePaiementId   Int?
  statut           String   @default("active")
  localisation     String?
  dateDInscription DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  typePaiement TypePaiement? @relation(fields: [typePaiementId], references: [id])
  missions     Mission[]
  devis        Devis[]
  factures     Facture[]

  @@map("clients")
}

model Mission {
  numIntervention             String   @id @unique
  natureIntervention          String
  objectifDuContrat           String
  description                 String?
  priorite                    String?  @default("normale")
  statut                      String?  @default("planifiee")
  dateSortieFicheIntervention DateTime
  clientId                    Int
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  client        Client           @relation(fields: [clientId], references: [id])
  interventions Intervention[]
  rapports      RapportMission[]
  devis         Devis[]

  @@map("missions")
}

model Intervention {
  id             Int       @id @default(autoincrement())
  dateHeureDebut DateTime
  dateHeureFin   DateTime?
  duree          Int?
  missionId      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  mission          Mission                  @relation(fields: [missionId], references: [numIntervention])
  techniciens      TechnicienIntervention[]
  rapports         RapportMission[]
  sortiesMateriels SortieMateriel[]

  @@map("interventions")
}

model TechnicienIntervention {
  id             Int     @id @default(autoincrement())
  technicienId   Int
  interventionId Int
  role           String  @default("assistant")
  commentaire    String?

  technicien   Technicien   @relation(fields: [technicienId], references: [id])
  intervention Intervention @relation(fields: [interventionId], references: [id])

  @@unique([technicienId, interventionId])
  @@map("technicien_interventions")
}

model Devis {
  id                Int       @id @default(autoincrement())
  numero            String    @unique
  clientId          Int
  missionId         String?
  titre             String
  description       String?
  montantHT         Float
  tauxTVA           Float     @default(20)
  montantTTC        Float
  statut            String    @default("brouillon")
  dateCreation      DateTime  @default(now())
  dateValidite      DateTime
  dateValidationDG  DateTime?
  dateValidationPDG DateTime?
  dateReponseClient DateTime?
  commentaireDG     String?
  commentairePDG    String?
  commentaireClient String?
  validePar         Int?
  valideParPDG      Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  client  Client       @relation(fields: [clientId], references: [id])
  mission Mission?     @relation(fields: [missionId], references: [numIntervention])
  lignes  DevisLigne[]

  validateur    Utilisateur? @relation("DevisValidateur", fields: [validePar], references: [id])
  validateurPDG Utilisateur? @relation("DevisValidateurPDG", fields: [valideParPDG], references: [id])

  // Relation avec Facture
  facture      Facture?  @relation("DevisFacture")
  devisGeneres Facture[] @relation("GeneresFactures")

  @@map("devis")
}

model DevisLigne {
  id           Int    @id @default(autoincrement())
  devisId      Int
  designation  String
  quantite     Int
  prixUnitaire Float
  montantHT    Float
  ordre        Int

  devis Devis @relation(fields: [devisId], references: [id], onDelete: Cascade)

  @@map("devis_lignes")
}

model Facture {
  id                   Int       @id @default(autoincrement())
  numero               String    @unique
  devisId              Int?      @unique
  clientId             Int
  montantHT            Float
  tauxTVA              Float     @default(20)
  montantTTC           Float
  statut               String    @default("emise")
  dateEmission         DateTime  @default(now())
  dateEcheance         DateTime
  datePaiement         DateTime?
  modePaiement         String?
  referenceTransaction String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  client Client @relation(fields: [clientId], references: [id])

  // Relation avec Devis
  devis Devis? @relation("DevisFacture", fields: [devisId], references: [id])

  lignes FactureLigne[]

  // Ajoutez la relation manquante ici
  devisGeneres Devis[] @relation("GeneresFactures")

  @@map("factures")
}

model FactureLigne {
  id           Int    @id @default(autoincrement())
  factureId    Int
  designation  String
  quantite     Int
  prixUnitaire Float
  montantHT    Float
  ordre        Int

  facture Facture @relation(fields: [factureId], references: [id], onDelete: Cascade)

  @@map("facture_lignes")
}

model RapportMission {
  id             Int       @id @default(autoincrement())
  titre          String
  contenu        String
  interventionId Int?
  technicienId   Int
  missionId      String
  createdById    Int?
  statut         String    @default("soumis")
  dateValidation DateTime?
  commentaire    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  intervention Intervention?  @relation(fields: [interventionId], references: [id])
  technicien   Technicien     @relation(fields: [technicienId], references: [id])
  mission      Mission        @relation(fields: [missionId], references: [numIntervention])
  images       RapportImage[]

  @@map("rapports_mission")
}

model RapportImage {
  id          Int     @id @default(autoincrement())
  rapportId   Int
  url         String
  description String?
  ordre       Int

  rapport RapportMission @relation(fields: [rapportId], references: [id], onDelete: Cascade)

  @@map("rapport_images")
}

model Message {
  id         Int       @id @default(autoincrement())
  contenu    String
  senderId   Int
  receiverId Int
  readAt     DateTime?
  createdAt  DateTime  @default(now())

  sender   Utilisateur @relation("MessageSender", fields: [senderId], references: [id])
  receiver Utilisateur @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@map("messages")
}

model Groupe {
  id       Int             @id @default(autoincrement())
  nom      String
  messages MessageGroupe[]
}

model MessageGroupe {
  id          Int         @id @default(autoincrement())
  contenu     String
  createdAt   DateTime    @default(now())
  userId      Int
  groupeId    Int
  attachments Json?
  reactions   Json? // { like: n, emoji: { "ðŸ˜€": n, ... } }
  user        Utilisateur @relation(fields: [userId], references: [id])
  groupe      Groupe      @relation(fields: [groupeId], references: [id])
}

model Notification {
  id        Int       @id @default(autoincrement())
  type      String
  message   String
  data      String?
  readAt    DateTime?
  createdAt DateTime  @default(now())
  userId    Int

  user Utilisateur @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  username   String
  actionType String
  entityType String
  entityId   String
  details    String
  ipAddress  String?
  timestamp  DateTime @default(now())

  user Utilisateur @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model HistoriqueModification {
  id         Int      @id @default(autoincrement())
  userId     Int
  entityType String
  entityId   String
  action     String
  timestamp  DateTime @default(now())

  user Utilisateur @relation(fields: [userId], references: [id])

  @@map("historique_modifications")
}

model PieceJointe {
  id         Int      @id @default(autoincrement())
  filename   String
  mimetype   String
  size       Int
  url        String
  uploadedBy Int
  uploadedAt DateTime @default(now())

  user Utilisateur @relation(fields: [uploadedBy], references: [id])

  @@map("pieces_jointes")
}

model Materiel {
  id                 Int       @id @default(autoincrement())
  reference          String    @unique
  designation        String
  description        String?
  quantiteTotale     Int       @default(0)
  quantiteDisponible Int       @default(0)
  seuilAlerte        Int       @default(5)
  emplacement        String?
  categorie          String    @default("Outillage")
  prixUnitaire       Float?    @default(0)
  fournisseur        String?
  dateAchat          DateTime?
  garantie           String?
  statut             String    @default("actif")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  sorties SortieMateriel[]
  entrees EntreeMateriel[]

  @@map("materiels")
}

model SortieMateriel {
  id             Int       @id @default(autoincrement())
  materielId     Int
  interventionId Int
  technicienId   Int
  quantite       Int
  dateSortie     DateTime  @default(now())
  motif          String?
  retourne       Boolean   @default(false)
  dateRetour     DateTime?
  quantiteRetour Int?      @default(0)
  commentaire    String?
  createdAt      DateTime  @default(now())

  materiel     Materiel     @relation(fields: [materielId], references: [id])
  intervention Intervention @relation(fields: [interventionId], references: [id])
  technicien   Technicien   @relation(fields: [technicienId], references: [id])

  @@map("sorties_materiel")
}

model EntreeMateriel {
  id          Int      @id @default(autoincrement())
  materielId  Int
  quantite    Int
  dateEntree  DateTime @default(now())
  source      String   @default("achat")
  prixTotal   Float?   @default(0)
  fournisseur String?
  facture     String?
  commentaire String?
  createdAt   DateTime @default(now())

  materiel Materiel @relation(fields: [materielId], references: [id])

  @@map("entrees_materiel")
}
