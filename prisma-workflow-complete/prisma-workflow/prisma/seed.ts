import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± D√©but du seeding de la base de donn√©es...');

  // Nettoyage des donn√©es existantes (optionnel)
  console.log('üßπ Nettoyage des donn√©es existantes...');
  
  // Cr√©ation des r√¥les
  console.log('üë• Cr√©ation des r√¥les...');
  const roleAdmin = await prisma.role.upsert({
    where: { libelle: 'Administrateur' },
    update: {},
    create: {
      libelle: 'Administrateur',
    },
  });

  const roleTechnicien = await prisma.role.upsert({
    where: { libelle: 'Technicien' },
    update: {},
    create: {
      libelle: 'Technicien',
    },
  });

  const roleManager = await prisma.role.upsert({
    where: { libelle: 'Manager' },
    update: {},
    create: {
      libelle: 'Manager',
    },
  });

  const roleClient = await prisma.role.upsert({
    where: { libelle: 'Client' },
    update: {},
    create: {
      libelle: 'Client',
    },
  });

  // Cr√©ation des sp√©cialit√©s
  console.log('üîß Cr√©ation des sp√©cialit√©s...');
  const specialiteElectricite = await prisma.specialite.upsert({
    where: { libelle: '√âlectricit√©' },
    update: {},
    create: {
      libelle: '√âlectricit√©',
      description: 'Installation et maintenance √©lectrique',
    },
  });

  const specialitePlomberie = await prisma.specialite.upsert({
    where: { libelle: 'Plomberie' },
    update: {},
    create: {
      libelle: 'Plomberie',
      description: 'Installation et r√©paration de syst√®mes de plomberie',
    },
  });

  const specialiteChauffage = await prisma.specialite.upsert({
    where: { libelle: 'Chauffage' },
    update: {},
    create: {
      libelle: 'Chauffage',
      description: 'Installation et maintenance de syst√®mes de chauffage',
    },
  });

  const specialiteClimatisation = await prisma.specialite.upsert({
    where: { libelle: 'Climatisation' },
    update: {},
    create: {
      libelle: 'Climatisation',
      description: 'Installation et maintenance de syst√®mes de climatisation',
    },
  });

  // Cr√©ation des types de paiement
  console.log('üí≥ Cr√©ation des types de paiement...');
  const typePaiementComptant = await prisma.typePaiement.upsert({
    where: { libelle: 'Comptant' },
    update: {},
    create: {
      libelle: 'Comptant',
      description: 'Paiement imm√©diat',
      delaiPaiement: 0,
      tauxRemise: 2.5,
    },
  });

  const typePaiement30j = await prisma.typePaiement.upsert({
    where: { libelle: '30 jours' },
    update: {},
    create: {
      libelle: '30 jours',
      description: 'Paiement √† 30 jours',
      delaiPaiement: 30,
      tauxRemise: 0,
    },
  });

  const typePaiement60j = await prisma.typePaiement.upsert({
    where: { libelle: '60 jours' },
    update: {},
    create: {
      libelle: '60 jours',
      description: 'Paiement √† 60 jours',
      delaiPaiement: 60,
      tauxRemise: 0,
    },
  });

  // Cr√©ation des utilisateurs
  console.log('üë§ Cr√©ation des utilisateurs...');
  const adminUser = await prisma.utilisateur.upsert({
    where: { email: 'admin@intervention.com' },
    update: {},
    create: {
      nom: 'Dupont',
      prenom: 'Jean',
      email: 'admin@intervention.com',
      motDePasse: '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/RK.s5uO.O', // password: admin123
      phone: '+33123456789',
      theme: 'light',
      displayName: 'Jean Dupont',
      address: '123 Rue de la Paix',
      state: '√éle-de-France',
      country: 'France',
      designation: 'Administrateur Syst√®me',
      balance: 0,
      emailStatus: 'verified',
      kycStatus: 'approved',
      status: 'active',
      roleId: roleAdmin.id,
    },
  });

  const managerUser = await prisma.utilisateur.upsert({
    where: { email: 'manager@intervention.com' },
    update: {},
    create: {
      nom: 'Martin',
      prenom: 'Sophie',
      email: 'manager@intervention.com',
      motDePasse: '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/RK.s5uO.O', // password: admin123
      phone: '+33123456790',
      theme: 'light',
      displayName: 'Sophie Martin',
      address: '456 Avenue des Champs',
      state: '√éle-de-France',
      country: 'France',
      designation: 'Manager Op√©rations',
      balance: 0,
      emailStatus: 'verified',
      kycStatus: 'approved',
      status: 'active',
      roleId: roleManager.id,
    },
  });

  const technicienUser1 = await prisma.utilisateur.upsert({
    where: { email: 'technicien1@intervention.com' },
    update: {},
    create: {
      nom: 'Moreau',
      prenom: 'Pierre',
      email: 'technicien1@intervention.com',
      motDePasse: '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/RK.s5uO.O', // password: admin123
      phone: '+33123456791',
      theme: 'dark',
      displayName: 'Pierre Moreau',
      address: '789 Rue de la R√©publique',
      state: '√éle-de-France',
      country: 'France',
      designation: 'Technicien Senior',
      balance: 0,
      emailStatus: 'verified',
      kycStatus: 'approved',
      status: 'active',
      roleId: roleTechnicien.id,
    },
  });

  const technicienUser2 = await prisma.utilisateur.upsert({
    where: { email: 'technicien2@intervention.com' },
    update: {},
    create: {
      nom: 'Bernard',
      prenom: 'Marie',
      email: 'technicien2@intervention.com',
      motDePasse: '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/RK.s5uO.O', // password: admin123
      phone: '+33123456792',
      theme: 'light',
      displayName: 'Marie Bernard',
      address: '321 Boulevard Saint-Germain',
      state: '√éle-de-France',
      country: 'France',
      designation: 'Technicienne',
      balance: 0,
      emailStatus: 'verified',
      kycStatus: 'approved',
      status: 'active',
      roleId: roleTechnicien.id,
    },
  });

  // Cr√©ation des techniciens
  console.log('üîß Cr√©ation des techniciens...');
  const technicien1 = await prisma.technicien.upsert({
    where: { utilisateurId: technicienUser1.id },
    update: {},
    create: {
      nom: 'Moreau',
      prenom: 'Pierre',
      contact: '+33123456791',
      specialiteId: specialiteElectricite.id,
      utilisateurId: technicienUser1.id,
    },
  });

  const technicien2 = await prisma.technicien.upsert({
    where: { utilisateurId: technicienUser2.id },
    update: {},
    create: {
      nom: 'Bernard',
      prenom: 'Marie',
      contact: '+33123456792',
      specialiteId: specialitePlomberie.id,
      utilisateurId: technicienUser2.id,
    },
  });

  // Cr√©ation des clients
  console.log('üè¢ Cr√©ation des clients...');
  const client1 = await prisma.client.upsert({
    where: { email: 'contact@entrepriseabc.com' },
    update: {},
    create: {
      nom: 'Entreprise ABC',
      email: 'contact@entrepriseabc.com',
      telephone: '+33123456800',
      entreprise: 'ABC Solutions',
      typeDeCart: 'Premium',
      numeroDeCarte: 'ABC001',
      typePaiementId: typePaiement30j.id,
      statut: 'active',
      localisation: 'Paris, France',
    },
  });

  const client2 = await prisma.client.upsert({
    where: { email: 'info@societedef.com' },
    update: {},
    create: {
      nom: 'Soci√©t√© DEF',
      email: 'info@societedef.com',
      telephone: '+33123456801',
      entreprise: 'DEF Industries',
      typeDeCart: 'Standard',
      numeroDeCarte: 'DEF002',
      typePaiementId: typePaiementComptant.id,
      statut: 'active',
      localisation: 'Lyon, France',
    },
  });

  // Cr√©ation des mat√©riels
  console.log('üõ†Ô∏è Cr√©ation des mat√©riels...');
  const materiel1 = await prisma.materiel.upsert({
    where: { reference: 'ELEC001' },
    update: {},
    create: {
      reference: 'ELEC001',
      designation: 'Multim√®tre num√©rique',
      description: 'Multim√®tre professionnel pour mesures √©lectriques',
      quantiteTotale: 10,
      quantiteDisponible: 8,
      seuilAlerte: 3,
      emplacement: 'Magasin A - √âtag√®re 1',
      categorie: 'Instrumentation',
      prixUnitaire: 150.00,
      fournisseur: 'Fluke Corporation',
      garantie: '2 ans',
      statut: 'actif',
    },
  });

  const materiel2 = await prisma.materiel.upsert({
    where: { reference: 'PLOMB001' },
    update: {},
    create: {
      reference: 'PLOMB001',
      designation: 'Cl√© √† molette 300mm',
      description: 'Cl√© √† molette professionnelle 300mm',
      quantiteTotale: 15,
      quantiteDisponible: 12,
      seuilAlerte: 5,
      emplacement: 'Magasin B - √âtag√®re 2',
      categorie: 'Outillage',
      prixUnitaire: 45.00,
      fournisseur: 'Stanley Tools',
      garantie: '1 an',
      statut: 'actif',
    },
  });

  // Cr√©ation des missions
  console.log('üìã Cr√©ation des missions...');
  const mission1 = await prisma.mission.upsert({
    where: { numIntervention: 'INT-2024-001' },
    update: {},
    create: {
      numIntervention: 'INT-2024-001',
      natureIntervention: 'Maintenance pr√©ventive',
      objectifDuContrat: 'V√©rification et maintenance du syst√®me √©lectrique',
      description: 'Contr√¥le annuel du tableau √©lectrique et des installations',
      priorite: 'normale',
      statut: 'planifiee',
      dateSortieFicheIntervention: new Date('2024-08-15'),
      clientId: client1.id,
    },
  });

  const mission2 = await prisma.mission.upsert({
    where: { numIntervention: 'INT-2024-002' },
    update: {},
    create: {
      numIntervention: 'INT-2024-002',
      natureIntervention: 'D√©pannage urgent',
      objectifDuContrat: 'R√©paration fuite d\'eau',
      description: 'Intervention urgente pour fuite dans les canalisations',
      priorite: 'urgente',
      statut: 'en_cours',
      dateSortieFicheIntervention: new Date('2024-08-10'),
      clientId: client2.id,
    },
  });

  // Cr√©ation des interventions
  console.log('‚ö° Cr√©ation des interventions...');
  const intervention1 = await prisma.intervention.create({
    data: {
      dateHeureDebut: new Date('2024-08-15T09:00:00'),
      dateHeureFin: new Date('2024-08-15T12:00:00'),
      duree: 180, // 3 heures en minutes
      missionId: mission1.numIntervention,
    },
  });

  const intervention2 = await prisma.intervention.create({
    data: {
      dateHeureDebut: new Date('2024-08-10T14:00:00'),
      dateHeureFin: null, // Intervention en cours
      duree: null,
      missionId: mission2.numIntervention,
    },
  });

  // Association techniciens-interventions
  console.log('üë• Association techniciens-interventions...');
  await prisma.technicienIntervention.create({
    data: {
      technicienId: technicien1.id,
      interventionId: intervention1.id,
      role: 'responsable',
      commentaire: 'Technicien principal pour cette intervention',
    },
  });

  await prisma.technicienIntervention.create({
    data: {
      technicienId: technicien2.id,
      interventionId: intervention2.id,
      role: 'responsable',
      commentaire: 'Intervention urgente plomberie',
    },
  });

  // Cr√©ation des devis
  console.log('üí∞ Cr√©ation des devis...');
  const devis1 = await prisma.devis.create({
    data: {
      numero: 'DEV-2024-001',
      clientId: client1.id,
      missionId: mission1.numIntervention,
      titre: 'Maintenance √©lectrique annuelle',
      description: 'Devis pour la maintenance pr√©ventive du syst√®me √©lectrique',
      montantHT: 800.00,
      tauxTVA: 20,
      montantTTC: 960.00,
      statut: 'valide',
      dateValidite: new Date('2024-09-15'),
      dateValidationDG: new Date('2024-08-05'),
      validePar: managerUser.id,
      lignes: {
        create: [
          {
            designation: 'Contr√¥le tableau √©lectrique',
            quantite: 1,
            prixUnitaire: 300.00,
            montantHT: 300.00,
            ordre: 1,
          },
          {
            designation: 'V√©rification installations',
            quantite: 1,
            prixUnitaire: 250.00,
            montantHT: 250.00,
            ordre: 2,
          },
          {
            designation: 'Rapport de conformit√©',
            quantite: 1,
            prixUnitaire: 250.00,
            montantHT: 250.00,
            ordre: 3,
          },
        ],
      },
    },
  });

  // Cr√©ation des rapports de mission
  console.log('üìÑ Cr√©ation des rapports de mission...');
  await prisma.rapportMission.create({
    data: {
      titre: 'Rapport maintenance √©lectrique',
      contenu: 'Maintenance effectu√©e avec succ√®s. Tous les contr√¥les sont conformes aux normes en vigueur.',
      interventionId: intervention1.id,
      technicienId: technicien1.id,
      missionId: mission1.numIntervention,
      statut: 'valide',
      dateValidation: new Date('2024-08-15T15:00:00'),
      commentaire: 'Intervention r√©alis√©e dans les temps',
    },
  });

  // Cr√©ation des sorties de mat√©riel
  console.log('üì¶ Cr√©ation des sorties de mat√©riel...');
  await prisma.sortieMateriel.create({
    data: {
      materielId: materiel1.id,
      interventionId: intervention1.id,
      technicienId: technicien1.id,
      quantite: 1,
      motif: 'Mesures √©lectriques',
      retourne: true,
      dateRetour: new Date('2024-08-15T16:00:00'),
      quantiteRetour: 1,
      commentaire: 'Mat√©riel retourn√© en bon √©tat',
    },
  });

  await prisma.sortieMateriel.create({
    data: {
      materielId: materiel2.id,
      interventionId: intervention2.id,
      technicienId: technicien2.id,
      quantite: 1,
      motif: 'R√©paration plomberie',
      retourne: false,
      commentaire: 'Mat√©riel en cours d\'utilisation',
    },
  });

  // Mise √† jour des quantit√©s disponibles
  await prisma.materiel.update({
    where: { id: materiel1.id },
    data: { quantiteDisponible: 8 },
  });

  await prisma.materiel.update({
    where: { id: materiel2.id },
    data: { quantiteDisponible: 11 },
  });

  console.log('‚úÖ Seeding termin√© avec succ√®s !');
  console.log(`
üìä Donn√©es cr√©√©es :
- ${await prisma.role.count()} r√¥les
- ${await prisma.specialite.count()} sp√©cialit√©s
- ${await prisma.typePaiement.count()} types de paiement
- ${await prisma.utilisateur.count()} utilisateurs
- ${await prisma.technicien.count()} techniciens
- ${await prisma.client.count()} clients
- ${await prisma.materiel.count()} mat√©riels
- ${await prisma.mission.count()} missions
- ${await prisma.intervention.count()} interventions
- ${await prisma.devis.count()} devis
- ${await prisma.rapportMission.count()} rapports de mission
- ${await prisma.sortieMateriel.count()} sorties de mat√©riel
  `);
}

main()
  .catch((e) => {
    console.error('‚ùå Erreur lors du seeding :', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

