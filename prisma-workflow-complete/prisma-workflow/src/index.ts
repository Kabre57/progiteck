import prisma, { checkDatabaseConnection, getDatabaseStats, disconnectPrisma } from './utils/prisma';
import { UtilisateurService } from './services/utilisateur.service';
import { MissionService } from './services/mission.service';

async function main() {
  console.log('üöÄ D√©marrage de l\'application Prisma Workflow...\n');

  // V√©rifier la connexion √† la base de donn√©es
  const isConnected = await checkDatabaseConnection();
  if (!isConnected) {
    console.error('‚ùå Impossible de se connecter √† la base de donn√©es');
    process.exit(1);
  }

  try {
    // Afficher les statistiques de la base de donn√©es
    console.log('üìä Statistiques de la base de donn√©es:');
    const stats = await getDatabaseStats();
    console.log(`- Utilisateurs: ${stats.utilisateurs}`);
    console.log(`- Clients: ${stats.clients}`);
    console.log(`- Missions: ${stats.missions}`);
    console.log(`- Interventions: ${stats.interventions}`);
    console.log(`- Devis: ${stats.devis}`);
    console.log(`- Mat√©riels: ${stats.materiels}\n`);

    // Exemple 1: R√©cup√©rer tous les utilisateurs avec pagination
    console.log('üë• Exemple 1: R√©cup√©ration des utilisateurs avec pagination');
    const utilisateurs = await UtilisateurService.getAllUtilisateurs(1, 5);
    console.log(`Trouv√© ${utilisateurs.data.length} utilisateurs sur ${utilisateurs.pagination.total} total`);
    utilisateurs.data.forEach(user => {
      console.log(`- ${user.prenom} ${user.nom} (${user.email}) - R√¥le: ${user.role.libelle}`);
    });
    console.log('');

    // Exemple 2: R√©cup√©rer les techniciens
    console.log('üîß Exemple 2: R√©cup√©ration des techniciens');
    const techniciens = await UtilisateurService.getUtilisateursByRole('Technicien');
    console.log(`Trouv√© ${techniciens.length} techniciens:`);
    techniciens.forEach(tech => {
      const specialite = tech.technicien?.specialite?.libelle || 'Non sp√©cifi√©e';
      console.log(`- ${tech.prenom} ${tech.nom} - Sp√©cialit√©: ${specialite}`);
    });
    console.log('');

    // Exemple 3: R√©cup√©rer les missions avec filtres
    console.log('üìã Exemple 3: R√©cup√©ration des missions');
    const missions = await MissionService.getAllMissions(1, 5);
    console.log(`Trouv√© ${missions.data.length} missions sur ${missions.pagination.total} total`);
    missions.data.forEach(mission => {
      console.log(`- ${mission.numIntervention}: ${mission.natureIntervention}`);
      console.log(`  Client: ${mission.client.nom}`);
      console.log(`  Statut: ${mission.statut} | Priorit√©: ${mission.priorite}`);
      console.log(`  Interventions: ${mission._count.interventions} | Devis: ${mission._count.devis}`);
    });
    console.log('');

    // Exemple 4: R√©cup√©rer une mission sp√©cifique avec tous les d√©tails
    console.log('üîç Exemple 4: D√©tails d\'une mission sp√©cifique');
    const missionDetail = await MissionService.getMissionByNumIntervention('INT-2024-001');
    if (missionDetail) {
      console.log(`Mission: ${missionDetail.numIntervention}`);
      console.log(`Nature: ${missionDetail.natureIntervention}`);
      console.log(`Client: ${missionDetail.client.nom} (${missionDetail.client.email})`);
      console.log(`Interventions (${missionDetail.interventions.length}):`);
      
      missionDetail.interventions.forEach(intervention => {
        console.log(`  - ID: ${intervention.id}`);
        console.log(`    D√©but: ${intervention.dateHeureDebut.toLocaleString()}`);
        console.log(`    Fin: ${intervention.dateHeureFin?.toLocaleString() || 'En cours'}`);
        console.log(`    Dur√©e: ${intervention.duree ? `${intervention.duree} minutes` : 'N/A'}`);
        console.log(`    Techniciens (${intervention.techniciens.length}):`);
        
        intervention.techniciens.forEach(techInt => {
          const tech = techInt.technicien;
          console.log(`      - ${tech.utilisateur?.prenom} ${tech.utilisateur?.nom} (${techInt.role})`);
          console.log(`        Sp√©cialit√©: ${tech.specialite.libelle}`);
        });
      });

      console.log(`Devis (${missionDetail.devis.length}):`);
      missionDetail.devis.forEach(devis => {
        console.log(`  - ${devis.numero}: ${devis.titre}`);
        console.log(`    Montant TTC: ${devis.montantTTC}‚Ç¨`);
        console.log(`    Statut: ${devis.statut}`);
      });
    }
    console.log('');

    // Exemple 5: Statistiques des missions
    console.log('üìà Exemple 5: Statistiques des missions');
    const missionStats = await MissionService.getMissionStats();
    console.log(`Total des missions: ${missionStats.totalMissions}`);
    console.log(`Missions ce mois: ${missionStats.missionsThisMonth}`);
    console.log(`Interventions en cours: ${missionStats.interventionsEnCours}`);
    
    console.log('R√©partition par statut:');
    missionStats.missionsByStatus.forEach(stat => {
      console.log(`  - ${stat.statut}: ${stat._count} missions`);
    });
    
    console.log('R√©partition par priorit√©:');
    missionStats.missionsByPriority.forEach(stat => {
      console.log(`  - ${stat.priorite}: ${stat._count} missions`);
    });
    console.log('');

    // Exemple 6: Cr√©er une notification pour un utilisateur
    console.log('üîî Exemple 6: Cr√©ation d\'une notification');
    const adminUser = await UtilisateurService.getUtilisateurByEmail('admin@intervention.com');
    if (adminUser) {
      await UtilisateurService.createNotification(
        adminUser.id,
        'info',
        'Nouvelle mission cr√©√©e: INT-2024-003',
        JSON.stringify({ missionId: 'INT-2024-003', type: 'nouvelle_mission' })
      );
      console.log('Notification cr√©√©e pour l\'administrateur');
    }
    console.log('');

    // Exemple 7: Cr√©er un log d'audit
    console.log('üìù Exemple 7: Cr√©ation d\'un log d\'audit');
    if (adminUser) {
      await UtilisateurService.createAuditLog(
        adminUser.id,
        adminUser.email,
        'READ',
        'Mission',
        'INT-2024-001',
        'Consultation des d√©tails de la mission',
        '127.0.0.1'
      );
      console.log('Log d\'audit cr√©√©');
    }
    console.log('');

    console.log('‚úÖ Tous les exemples ont √©t√© ex√©cut√©s avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des exemples:', error);
  } finally {
    // D√©connexion propre de Prisma
    await disconnectPrisma();
    console.log('üîå D√©connexion de la base de donn√©es');
  }
}

// Gestion des signaux pour une fermeture propre
process.on('SIGINT', async () => {
  console.log('\nüõë Arr√™t de l\'application...');
  await disconnectPrisma();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë Arr√™t de l\'application...');
  await disconnectPrisma();
  process.exit(0);
});

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', async (reason, promise) => {
  console.error('‚ùå Erreur non g√©r√©e:', reason);
  await disconnectPrisma();
  process.exit(1);
});

process.on('uncaughtException', async (error) => {
  console.error('‚ùå Exception non captur√©e:', error);
  await disconnectPrisma();
  process.exit(1);
});

// Ex√©cuter le programme principal
if (require.main === module) {
  main();
}

export default main;

