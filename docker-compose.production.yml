version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: progitek-postgres
    environment:
      POSTGRES_DB: progitek_prod
      POSTGRES_USER: progitek_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - progitek-network

  # Redis pour le cache
  redis:
    image: redis:7-alpine
    container_name: progitek-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - progitek-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: progitek-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://progitek_user:${POSTGRES_PASSWORD}@postgres:5432/progitek_prod?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${FRONTEND_URL}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - progitek-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        VITE_API_BASE_URL: ${BACKEND_URL}
    container_name: progitek-frontend
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    networks:
      - progitek-network
    volumes:
      - ./ssl:/etc/ssl/certs

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: progitek-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - progitek-network

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: progitek-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - progitek-network

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: progitek-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - progitek-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  progitek-network:
    driver: bridge

